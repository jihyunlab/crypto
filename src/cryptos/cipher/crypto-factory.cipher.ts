import { Cipher } from './crypto.cipher';

export const CIPHER = {
  AES_128_CBC: 'aes-128-cbc',
  AES_192_CBC: 'aes-192-cbc',
  AES_256_CBC: 'aes-256-cbc',
  AES_128_CFB: 'aes-128-cfb',
  AES_192_CFB: 'aes-192-cfb',
  AES_256_CFB: 'aes-256-cfb',
  AES_128_CTR: 'aes-128-ctr',
  AES_192_CTR: 'aes-192-ctr',
  AES_256_CTR: 'aes-256-ctr',
  AES_128_OFB: 'aes-128-ofb',
  AES_192_OFB: 'aes-192-ofb',
  AES_256_OFB: 'aes-256-ofb',
  AES_128_ECB: 'aes-128-ecb',
  AES_192_ECB: 'aes-192-ecb',
  AES_256_ECB: 'aes-256-ecb',
  ARIA_128_CBC: 'aria-128-cbc',
  ARIA_192_CBC: 'aria-192-cbc',
  ARIA_256_CBC: 'aria-256-cbc',
  ARIA_128_CFB: 'aria-128-cfb',
  ARIA_192_CFB: 'aria-192-cfb',
  ARIA_256_CFB: 'aria-256-cfb',
  ARIA_128_CTR: 'aria-128-ctr',
  ARIA_192_CTR: 'aria-192-ctr',
  ARIA_256_CTR: 'aria-256-ctr',
  ARIA_128_OFB: 'aria-128-ofb',
  ARIA_192_OFB: 'aria-192-ofb',
  ARIA_256_OFB: 'aria-256-ofb',
  ARIA_128_ECB: 'aria-128-ecb',
  ARIA_192_ECB: 'aria-192-ecb',
  ARIA_256_ECB: 'aria-256-ecb',
  CAMELLIA_128_CBC: 'camellia-128-cbc',
  CAMELLIA_192_CBC: 'camellia-192-cbc',
  CAMELLIA_256_CBC: 'camellia-256-cbc',
  CAMELLIA_128_CFB: 'camellia-128-cfb',
  CAMELLIA_192_CFB: 'camellia-192-cfb',
  CAMELLIA_256_CFB: 'camellia-256-cfb',
  CAMELLIA_128_CTR: 'camellia-128-ctr',
  CAMELLIA_192_CTR: 'camellia-192-ctr',
  CAMELLIA_256_CTR: 'camellia-256-ctr',
  CAMELLIA_128_OFB: 'camellia-128-ofb',
  CAMELLIA_192_OFB: 'camellia-192-ofb',
  CAMELLIA_256_OFB: 'camellia-256-ofb',
  CAMELLIA_128_ECB: 'camellia-128-ecb',
  CAMELLIA_192_ECB: 'camellia-192-ecb',
  CAMELLIA_256_ECB: 'camellia-256-ecb',
  SM4: 'sm4',
  SM4_CBC: 'sm4-cbc',
  SM4_CFB: 'sm4-cfb',
  SM4_CTR: 'sm4-ctr',
  SM4_ECB: 'sm4-ecb',
  SM4_OFB: 'sm4-ofb',
} as const;
export type CIPHER = (typeof CIPHER)[keyof typeof CIPHER];

export const create = (cipher: string, key: string | Buffer) => {
  return new Cipher(cipher, key);
};
